package lunainc.com.mx.Test2;

import java.util.InputMismatchException;
import java.util.Random;
import java.util.Scanner;
import java.util.regex.Pattern;

/**
 * 2.- Realizar un programa que en un principio solicite un PIN de 4 dígitos numéricos (0-9)
 * Tener en cuenta:
 * • El PIN debe de ser de 4 dígitos y solo debe ser numéricos, seguir solicitando el
 * PIN hasta que se cumpla esta condición.
 * Una vez que se dígito el PIN, realizar un método que adivine esta combinación.
 */
public class Main {


    /**
     * Method to request pin
     *
     * @return int pin valid
     */
    private static int requestPin() {
        Scanner t = new Scanner(System.in);//Keyboard access via terminal
        int value;
        try {
            System.out.println("Ingresa un pin de 4 digitos numéricos");
            value = t.nextInt();
            String valTxt = String.valueOf(value);

            if (Pattern.matches("[0-9]*", valTxt) && valTxt.trim().length() == 4) {
                System.out.println("Pin ingresado: " + value);
            } else {
                System.err.println("Pin invalido, Intente de nuevo");
                value = requestPin();
            }


        } catch (NumberFormatException | InputMismatchException nFE) {
            System.err.println("Debes ingresar un valor numerico valido");
            value = requestPin();
        }
        return value;
    }


    /**
     * method that generates random numbers from 0 - 9 for pin guessing
     * @return String - numbers generated
     */
    public static String generateCombination() {
        Random randy = new Random();
        StringBuilder val = new StringBuilder();
        int[] randArray = {10, 10, 10, 10};

        for (int i = 0; i < randArray.length; i++) {
            int temp = randy.nextInt(9);
            while (temp == randArray[0] || temp == randArray[1] || temp == randArray[2] || temp == randArray[3]) {
                temp = randy.nextInt(9);
            }
            randArray[i] = temp;
            val.append(temp);
        }
        return val.toString();
    }

    /**
     * method to generate combinations until a valid one is found.
     * @param pin is the pin entered by the user to compare if it is the same as the one generated by the user.
     */
    public static void guessCombination(int pin) {
        int generate;

        do {
            generate = Integer.parseInt(generateCombination());
            System.out.println("Valor generado: " + generate);
        }
        while (pin != generate);
    }

    public static void main(String[] args) {
         guessCombination(requestPin());
    }

}
